<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[curious and driven]]></title>
  <link href="http://khakimov.github.com/atom.xml" rel="self"/>
  <link href="http://khakimov.github.com/"/>
  <updated>2012-12-29T14:34:28-08:00</updated>
  <id>http://khakimov.github.com/</id>
  <author>
    <name><![CDATA[khakimov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatically Rewrite HTTP to HTTPS with JS]]></title>
    <link href="http://khakimov.github.com/blog/2012/12/23/automatically-rewrite-http-to-https-with-js/"/>
    <updated>2012-12-23T11:15:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/12/23/automatically-rewrite-http-to-https-with-js</id>
    <content type="html"><![CDATA[<p>I wrote the post <a href="http://khakimov.com/blog/2012/11/24/what-is-wrong-with-http-secure/">What Is Wrong With HTTP Secure</a> and my friend gave me an idea to try just rewrite hardcoded link (http:// -> https://). The beauty of JS are simplicity, documentations and tons of examples, so even if you don&#8217;t know how to get element without using jQuery it will be easy to figure out in couple minutes as I did in the night.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">===</span> <span class="s1">&#39;https:&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// http to https for &lt;link&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;link&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;http:&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">link</span> <span class="o">=</span> <span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;http:&#39;</span><span class="p">,</span> <span class="s1">&#39;https:&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">link</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// http to https for &lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">scripts</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">scripts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">scripts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;http:&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">script</span> <span class="o">=</span> <span class="nx">scripts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;http:&#39;</span><span class="p">,</span> <span class="s1">&#39;https:&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">scripts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">script</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// http to https for images</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">images</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">images</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">images</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;http:&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">img</span> <span class="o">=</span> <span class="nx">images</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;http:&#39;</span><span class="p">,</span> <span class="s1">&#39;https:&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">images</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">img</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maybe folks from KBIT.dk will add it to their chrome extensions <a href="https://code.google.com/p/kbsslenforcer/">KB SSL Enforcer</a>. Anyway, my Internet looks much better now =) and safer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[English Shellcode]]></title>
    <link href="http://khakimov.github.com/blog/2012/12/10/english-shellcode/"/>
    <updated>2012-12-10T21:56:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/12/10/english-shellcode</id>
    <content type="html"><![CDATA[<p>This paper demonstrate a technique for automatically producing English Shellcode — that is, transforming arbitrary shellcode into a representation that is statistically similar to English prose.</p>

<p><img src="http://pix.am/kWJT.png" alt="" /></p>

<p><a title="View Ccs243 Mason on Scribd" href="http://www.scribd.com/doc/116712351/Ccs243-Mason" style="margin: 12px auto 6px auto; font-family: Helvetica,Arial,Sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 14px; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none; display: block; text-decoration: underline;">Ccs243 Mason</a><iframe class="scribd_iframe_embed" src="http://www.scribd.com/embeds/116712351/content?start_page=1&view_mode=scroll&access_key=key-kfmhab4cfcscgy1dh9i" data-auto-height="false" data-aspect-ratio="0.772727272727273" scrolling="no" id="doc_18420" width="100%" height="600" frameborder="0"></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bypassing DEP/ASLR protections]]></title>
    <link href="http://khakimov.github.com/blog/2012/12/09/bypassing-dep-slash-aslr-protections/"/>
    <updated>2012-12-09T21:13:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/12/09/bypassing-dep-slash-aslr-protections</id>
    <content type="html"><![CDATA[<p>Today we are going to learn about data execution prevention (DEP) and address space layout randomization (ASLR). Last Sunday I read about <a href="http://khakimov.com/blog/2012/12/02/return-into-libc-without-function-calls/">return-into-libc</a> and one week before was post about <a href="http://khakimov.com/blog/2012/11/20/buffer-overflow/">buffer overflow</a> as-is. Both methods reqired to know the address of attacker shellcode and/or standard kernel library (we found out the address of system() function in the memory to use it in <strong>return-into-libc</strong> with this code int main() { system();}). Modern systems decided to implement something what will make stack addresses and addressess of library routines unpredictable and different from machine to machine (no more universal exploits =) kidding).</p>

<p>Author <a href="https://twitter.com/justdionysus">Dionysus Blazakis</a> holds BS from University of Maryland and doing interesting things, I saw his presentation &#8220;The Apple Sandbox&#8221; and then found this paper, great job Dionysus. I inspired by his example and it motivates me to keep digging in research field. Dion, if you&#8217;ll ever read this I just want to say thank you! Lets get back to his paper and read what this smart fellow prepared for us.</p>

<p><a title="View Blazakis on Scribd" href="http://www.scribd.com/doc/116197211/Blazakis" style="margin: 12px auto 6px auto; font-family: Helvetica,Arial,Sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 14px; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none; display: block; text-decoration: underline;">Blazakis</a><iframe class="scribd_iframe_embed" src="http://www.scribd.com/embeds/116197211/content?start_page=1&view_mode=scroll&access_key=key-1dr5xy06ojvmp97eq1hg" data-auto-height="false" data-aspect-ratio="0.772727272727273" scrolling="no" id="doc_39852" width="100%" height="600" frameborder="0"></iframe></p>

<p>DEP and ASLR are very real problem in the side of an exploit developer. DEP makes locating shellcode difficult, ASLR further complicates an attack by obfuscating the base address of the loaded data. Adobe Flash Player is used as an example, Dion also referenced to JIT spraying (Just-In-Time).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A Just-in-time compiler (JIT), by definition, produces machine 
</span><span class='line'>code as its output. Since it produces executable data, a JIT 
</span><span class='line'>compiler is one of the few types of programs that **cannot** be 
</span><span class='line'>run in a **no-executable-data environment**. Therefore, JIT 
</span><span class='line'>compilers are normally exempt from data execution prevention. A 
</span><span class='line'>JIT spray compiles code that then proceeds to spray the memory 
</span><span class='line'>with enough instances of exploit code to overwhelm the address 
</span><span class='line'>space randomization and execute the exploit itself.</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>JIT spraying is very simular to heap spraying, in simple terms attacker stuff heap with multiple copies of attack code (payload) and that increases the chances of successful exploitation.</p>

<p>JIT Spray Exploit Demo</p>

<iframe width="640" height="480" src="http://www.youtube.com/embed/HJuBpciJ3Ao?rel=0" frameborder="0" allowfullscreen></iframe>


<p>So, why do you need this? If you found the overflow in the modern browsers you will not able to use it easily, because of randomization, the address space is randomized and you don&#8217;t know where to point EIP and even if you have data in the heap DEP wont allow you to execute it. But you can use Just-In-Time compiler which will allocate writable memory for you and write executable code into it. For more details please read the paper above. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You and Your Research]]></title>
    <link href="http://khakimov.github.com/blog/2012/12/05/you-and-your-research/"/>
    <updated>2012-12-05T16:43:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/12/05/you-and-your-research</id>
    <content type="html"><![CDATA[<iframe width="853" height="480" src="http://www.youtube.com/embed/JoVx_-bM8Tg?rel=0" frameborder="0" allowfullscreen></iframe>


<p><a href="https://conference.hitb.org/hitbsecconf2012kul/materials/D1T2%20-%20Haroon%20Meer%20-%20You%20and%20Your%20Research.pdf">PDF</a></p>

<p>What does it take to do quality research? What stops you from being a one-hit wonder? Is there an age limit to productive hackery? What are the key ingredients needed and how can you up your chances of doing great work? In a talk unabashedly stolen from far greater minds we hope to answer these questions and discuss their repercussions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return-into-libc without Function Calls]]></title>
    <link href="http://khakimov.github.com/blog/2012/12/02/return-into-libc-without-function-calls/"/>
    <updated>2012-12-02T14:12:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/12/02/return-into-libc-without-function-calls</id>
    <content type="html"><![CDATA[<p>Since OpenBSD has a nonexecutable stack by default and you can also patch your Linux kernel and make nonexecutable stack through PaX, AMD and Intel recently added to their processors a per-page execute disable bit to ease WOX implementation and even Microsoft implement WOX (no location in memory into which the attacker can inject code to execute, or just imagine no memory location in a process image is marked both writable - W and executable - X) all it means you can not execute your shellcode on the stack.</p>

<p>Today I read about technique is known as <strong>return into libc</strong> by <a href="http://cseweb.ucsd.edu/~hovav/">Hovav Shacham</a> (btw, his Ph.D. advisor was professor of Computer Science and Electrial Engineering at Stanford <a href="http://crypto.stanford.edu/~dabo/">Dan Boneh</a>. I took his CS155 class, he is really good in his field).</p>

<p>What is this about? If we can&#8217;t write in stack what should we do? We can&#8217;t inject code, so, we will use code that already exists in the proccess image we are attacking. <strong>Libc</strong> is the usual target that contains various basic functions, such as printf() and exit(). These functions are share, so any program that uses the printf() function directs execution into the appropriate location in libc. And attacker with his explout can do the same thing and direct a program&#8217;s execution into a certain function in libc. But in principle any available code, either from the program&#8217;s text segment of from a library it links to, could be used instead libc.</p>

<p>Enjoy!</p>

<p><a title="View Geometry (1) on Scribd" href="http://www.scribd.com/doc/115228599/Geometry-1" style="margin: 12px auto 6px auto; font-family: Helvetica,Arial,Sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 14px; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none; display: block; text-decoration: underline;">Geometry (1)</a><iframe class="scribd_iframe_embed" src="http://www.scribd.com/embeds/115228599/content?start_page=1&view_mode=scroll&access_key=key-1qjla86da9zi8xelaiqr" data-auto-height="false" data-aspect-ratio="0.772727272727273" scrolling="no" id="doc_22341" width="100%" height="600" frameborder="0"></iframe></p>

<p>I played a litle bit with <strong>return into libc</strong> and the main idea was to force the program to spawn a shell without executing anything on the stack, by returning int the libc function system().</p>

<figure class='code'><figcaption><span>sys.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>   <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>tmp.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span> <span class="n">system</span><span class="p">();</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>tmp.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">rus</span><span class="err">@</span><span class="n">rus</span><span class="o">-</span><span class="n">desktop</span><span class="o">:/</span><span class="n">tmp</span> <span class="err">$</span> <span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="n">t</span> <span class="n">tmp</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">rus</span><span class="err">@</span><span class="n">rus</span><span class="o">-</span><span class="n">desktop</span><span class="o">:/</span><span class="n">tmp</span> <span class="err">$</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">q</span> <span class="p">.</span><span class="o">/</span><span class="n">t</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="k">break</span> <span class="n">main</span>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">1</span> <span class="n">at</span> <span class="mh">0x804837a</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">run</span>
</span><span class='line'><span class="n">Starting</span> <span class="n">program</span><span class="o">:</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="mh">0x0804837a</span> <span class="n">in</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">print</span> <span class="n">system</span>
</span><span class='line'><span class="err">$</span><span class="mi">1</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">text</span> <span class="n">variable</span><span class="p">,</span> <span class="n">no</span> <span class="n">debug</span> <span class="n">info</span><span class="o">&gt;</span><span class="p">}</span> <span class="mh">0xb7ed0d80</span> <span class="o">&lt;</span><span class="n">system</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">quit</span>
</span></code></pre></td></tr></table></div></figure>


<p>here we got address of function <strong>system()</strong> and it is located at <strong>0xb7ed0d80</strong>.</p>

<figure class='code'><figcaption><span>tmp.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">rus</span><span class="err">@</span><span class="n">rus</span><span class="o">-</span><span class="n">desktop</span><span class="o">:/</span><span class="n">tmp</span> <span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="err">$</span><span class="p">(</span><span class="n">perl</span> <span class="o">-</span><span class="n">e</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;AAAA&quot;</span><span class="n">x7</span> <span class="p">.</span> <span class="s">&quot;</span><span class="se">\x80\x0d\xed\xb7</span><span class="s">&quot;</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nl">sh:</span> <span class="o">????????:</span> <span class="n">command</span> <span class="n">not</span> <span class="n">found</span>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span>
</span></code></pre></td></tr></table></div></figure>


<p>7 words of data are used for spacin in the exploit and then we call system() as you can see. In this example I don&#8217;t pass any arguments, but it&#8217;s should be of course &#8220;/bin/sh&#8221;. That&#8217;s my Sunday and happy hacking hours!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Wrong With HTTP Secure]]></title>
    <link href="http://khakimov.github.com/blog/2012/11/24/what-is-wrong-with-http-secure/"/>
    <updated>2012-11-24T12:33:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/11/24/what-is-wrong-with-http-secure</id>
    <content type="html"><![CDATA[<p>That&#8217;s not a secret that I in love with security and I&#8217;m using some applications on a regular basis to protect my security such as vpn when using public wifi or https everythere where it is possible. HTTPS is not a holy Grail, but often https is enough to secure facebook or gmail connection. Of course I know about DNS changer/spoof or force HTTP session insted HTTPS which attackers use often and that&#8217;s why I&#8217;m using also <strong><a href="https://chrome.google.com/webstore/detail/kb-ssl-enforcer/flcpelgcagfhfoegekianiofphddckof/details">KB SSL Enforcer</a></strong>.</p>

<p>KB SSL Enforcer helps automatically detects if a site supports SSL and redirects you to it. Also it blocks insecure content when you load page over ssl and something on this page has insecure css/js/image.</p>

<p>Security can be compromised completely by an active atacker exploiting a simple mistake such as loading css, image or Flash banner over an insecure connection. For instance,</p>

<p><a href="https://nytimes.com">nytimes.com</a>
<img src="http://pix.am/L0CO.png" alt="" /></p>

<p><a href="https://woot.com">woot.com</a>:
<img src="http://pix.am/GPYh.png" alt="" /></p>

<p><a href="https://www.dailymotion.com/us">dailymotion.com</a>
<img src="http://pix.am/kY88.png" alt="" /></p>

<p><a href="https://www.ehow.com/">ehow.com</a>
<img src="http://pix.am/bFrO.png" alt="" /></p>

<p>so on and so on&#8230; Problem is very simple - <strong>hardcoded http://</strong> links.</p>

<p><strong>Solution?</strong> Please, don&#8217;t use hardcoded http:// if you have http and https! I hope having https version is going to be as a standard and this is really good news &#8221;<a href="https://tools.ietf.org/html/rfc6797">HTTP Strict Transport Security (HSTS)</a>&#8221;. This RFC was approved couple days ago, read it and don&#8217;t forget to check your website!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hero Lecture: Dr. Vint Cerf]]></title>
    <link href="http://khakimov.github.com/blog/2012/11/24/hero-lecture-dr-vint-cerf/"/>
    <updated>2012-11-24T00:01:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/11/24/hero-lecture-dr-vint-cerf</id>
    <content type="html"><![CDATA[<iframe width="640" height="480" src="http://www.youtube.com/embed/v7Lai2lkKnM?rel=0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buffer Overflow]]></title>
    <link href="http://khakimov.github.com/blog/2012/11/20/buffer-overflow/"/>
    <updated>2012-11-20T23:17:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/11/20/buffer-overflow</id>
    <content type="html"><![CDATA[<p>I&#8217;m very interesting in research paper and want to know better what computer security research is like. I found Vitaly Shmatikov and his course about great papers in Computer Security and decided to try each weekend read and write about one paper.</p>

<p>Vitaly Shmatikov is one of most interesting person for me in computer security and privacy. He got his PhD at Stanford and his thesis was &#8221;<a href="https://www.cs.utexas.edu/~shmat/shmat_tcs.pdf">Finite-State Analysis of Security Protocols</a>&#8221;, also his prof at Stanford was John C. Mitchell.</p>

<p>So, today I want to start with Buffer Overflow and here is paper 1999 by Crispin Cowan, Perry Wagle, Calton Pu,Steve Beattie, and Jonathan Walpole.</p>

<p><a title="View Overflow on Scribd" href="http://www.scribd.com/doc/113583111/Overflow" style="margin: 12px auto 6px auto; font-family: Helvetica,Arial,Sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 14px; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none; display: block; text-decoration: underline;">Overflow</a><iframe class="scribd_iframe_embed" src="http://www.scribd.com/embeds/113583111/content?start_page=1&view_mode=scroll&access_key=key-39aierbs22vhrn0azpl" data-auto-height="true" data-aspect-ratio="0.772727272727273" scrolling="no" id="doc_1657" width="100%" height="600" frameborder="0"></iframe></p>

<p>Btw, in this paper they metioned about Morris Worm and early versions of using buffer overflow and I found the peace of Morris Worm&#8217;s overflow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; VAX binary code fragment from the Morris Internet Worm.
</span><span class='line'>; Downloaded to the fingerd serving process via the gets() hole.
</span><span class='line'>; Performs execve(“/bin/sh”,0,0)
</span><span class='line'>pushl $0068732f   ; last half of name: "/sh\0"
</span><span class='line'>pushl $6e69622f   ; first half of name: "/bin"
</span><span class='line'>mov   sp,r10            ; pointer to the string
</span><span class='line'>pushl $0          ; 3rd parameter: environment = null
</span><span class='line'>pushl $0          ; 2nd parameter: args = null
</span><span class='line'>pushl r10         ; 1st parameter: pointer to the executable name
</span><span class='line'>pushl $3          ; 3 parameters on the stack
</span><span class='line'>movl  sp,ap       ; ArgumentPointer points to arguments
</span><span class='line'>chmk  $3b         ; SoftwareException 0x3B = EXECVE call</span></code></pre></td></tr></table></div></figure>


<p>It used a buffer overflow against the fingerd daemon. Other worms also often use buffer overflow to compromise the machine. CodeRed used overflow in MS-IIS server, SQL Slammer - overflow in MSSQL server, Sasser overflow in Windows LSASS, Conficker used overflow in Windows RPC and famous Stuxnet used several 0day overflows and same Windows RPC as Conficker. Looks like Buffer Overflow is the basis of many software vulnerabilities and can be maliciously exploited.</p>

<p>In computer security and programming, a buffer overflow, or buffer overrun, is an anomaly where a program, while writing data to a buffer, overruns the buffer&#8217;s boundary and overwrites adjacent memory. <strong>Buffer</strong> is a data storage area inside computer memory (stack or heap).</p>

<p>Suppose we have Webserver contain this function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>    <span class="c1">// allocate 100 bytes on stack </span>
</span><span class='line'>      <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>   <span class="c1">// copy argument into local buffer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>strcpy</strong> does not check whether the string at *s contains fewer than 126 characters and if a string longer than 126 bytes is copied into buffer, it will overwrite adjacent stack locations.</p>

<p><img src="http://pix.am/ou9H.png" alt="" />
<img src="http://pix.am/HSH8.png" alt="" /></p>

<p>We overflow the return address and set address of attack code (the value in the RET position must point to the beginning of attack assembly code in the buffer, otherwise application will crash with segmentation violation).</p>

<p>Other exampe from <strong>Hacking</strong> book</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">buffer_one</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">buffer_two</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer_one</span><span class="p">,</span> <span class="s">&quot;one&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer_two</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[BEFORE] buffer_two is at %p contain </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer_two</span><span class="p">,</span> <span class="n">buffer_two</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[BEFORE] buffer_one is at %p contain </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer_one</span><span class="p">,</span> <span class="n">buffer_one</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[BEFORE] value is at %p and is %d (0x%08x)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">[STRCPY] copying %d bytes into buffer_two</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>   <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer_two</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[AFTER] buffer_two is at %p and contains </span><span class="se">\&#39;</span><span class="s">%s</span><span class="se">\&#39;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer_two</span><span class="p">,</span> <span class="n">buffer_two</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[AFTER] buffer_one is at %p and contains </span><span class="se">\&#39;</span><span class="s">%s</span><span class="se">\&#39;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer_one</span><span class="p">,</span> <span class="n">buffer_one</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[AFTER] value is at %p and is %d (0x%08x)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">overflow</span><span class="err">@</span><span class="n">hacking</span><span class="o">:~/</span><span class="n">booksrc</span> <span class="err">$</span> <span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="n">overflow_example</span> <span class="n">overflow_example</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">overflow</span><span class="err">@</span><span class="n">hacking</span><span class="o">:~/</span><span class="n">booksrc</span> <span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">overflow_example</span> <span class="mi">1234567890</span>
</span><span class='line'><span class="p">[</span><span class="n">BEFORE</span><span class="p">]</span> <span class="n">buffer_two</span> <span class="n">is</span> <span class="n">at</span> <span class="mh">0xbffff7f0</span> <span class="n">and</span> <span class="n">contains</span> <span class="err">&#39;</span><span class="n">two</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">[</span><span class="n">BEFORE</span><span class="p">]</span> <span class="n">buffer_one</span> <span class="n">is</span> <span class="n">at</span> <span class="mh">0xbffff7f8</span> <span class="n">and</span> <span class="n">contains</span> <span class="err">&#39;</span><span class="n">one</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">[</span><span class="n">BEFORE</span><span class="p">]</span> <span class="n">value</span> <span class="n">is</span> <span class="n">at</span> <span class="mh">0xbffff804</span> <span class="n">and</span> <span class="n">is</span> <span class="mi">5</span> <span class="p">(</span><span class="mh">0x00000005</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">STRCPY</span><span class="p">]</span> <span class="n">copying</span> <span class="mi">10</span> <span class="n">bytes</span> <span class="n">into</span> <span class="n">buffer_two</span>
</span><span class='line'><span class="p">[</span><span class="n">AFTER</span><span class="p">]</span> <span class="n">buffer_two</span> <span class="n">is</span> <span class="n">at</span> <span class="mh">0xbffff7f0</span> <span class="n">and</span> <span class="n">contains</span> <span class="err">&#39;</span><span class="mi">1234567890</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">[</span><span class="n">AFTER</span><span class="p">]</span> <span class="n">buffer_one</span> <span class="n">is</span> <span class="n">at</span> <span class="mh">0xbffff7f8</span> <span class="n">and</span> <span class="n">contains</span> <span class="err">&#39;</span><span class="mi">90</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">[</span><span class="n">AFTER</span><span class="p">]</span> <span class="n">value</span> <span class="n">is</span> <span class="n">at</span> <span class="mh">0xbffff804</span> <span class="n">and</span> <span class="n">is</span> <span class="mi">5</span> <span class="p">(</span><span class="mh">0x00000005</span><span class="p">)</span>
</span><span class='line'><span class="n">overflow</span><span class="err">@</span><span class="n">hacking</span><span class="o">:~/</span><span class="n">booksrc</span> <span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Probably you will try to check this code on your computer (macos in my case), but <a href="https://en.wikipedia.org/wiki/Buffer_overflow_protection">buffer overflow protection</a> was included in release GCC 4.1 and you have to use <strong>-fno-stack-protector</strong> to compile your code. (hmm, i&#8217;m still getting error Program received signal SIGABRT, Aborted. which kills the proccess, couple clicks with google told me to recompile gcc. Seems now it&#8217;s not easy to write bogus code =)). In this case I have virtual machine with 32-bit pretty old Ubuntu.</p>

<figure class='code'><figcaption><span>t.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Q</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Q</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The return address in a stack frame can be located by undestanding how the stack frame is created. This process begins in the main() function even before the function call.</p>

<p>Couple things you have to know about the stack. The stack is used to pass prcedure arguments, <strong>to store return information</strong>, to save registers for later restoration and for local storage. The portion of the stack allocated for a single procedure call is called a <strong>stack frame</strong>. $EBP register serving as the <strong>frame pointer</strong> and register $ESP serving as the <strong>stack pointer</strong>.</p>

<p>The main idea is when main() calls Q() the <strong>return</strong> address within main() where the program should resume execution when it returns from Q. If somebody can overwrite return address it can jump or/and execute other code.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/4/4f/Stack_Overflow_2.png" alt="" /></p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/93/Stack_Overflow_3.png" alt="" /></p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c3/Stack_Overflow_4.png" alt="" /></p>

<p>More details you can find in the paper above. If you are interesting in roots of the problem and how actually stack/heap works, I highly recommend to read the book <a href="http://www.amazon.com/Computer-Systems-A-Programmers-Perspective/dp/013034074X">Computer System: A Programmer&#8217;s Perspective by Bryant and O&#8217;Hallaron</a>.</p>

<p>The first step is always the hardest. Will see how long I hold out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computer and Network Security specializations]]></title>
    <link href="http://khakimov.github.com/blog/2012/11/17/computer-and-network-security-specializations/"/>
    <updated>2012-11-17T10:41:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/11/17/computer-and-network-security-specializations</id>
    <content type="html"><![CDATA[<p>a. Each of the following: CS 140, 144, 155, 244, 255</p>

<ul>
<li>CS 140: Operating Systems</li>
<li>CS 144: Introduction to Computer Networking (*)</li>
<li>CS 155: Computer and Network Security (*)</li>
<li>CS 244: Advanced Topics in Networking</li>
<li>CS 255: Introduction to Cryptography</li>
</ul>


<p>b. At least three of the following: CS 142, 240, 241, 244B, 244C, 259, 261, 340, 344, 355, 365</p>

<ul>
<li>CS 142: Web Applications (*)</li>
<li>CS 240: Advanced Topics in Operating Systems</li>
<li>CS 241: Secure Web Programming</li>
<li>CS 244B: Distributed Systems</li>
<li>CS 244C: Distributed System Projects</li>
<li>CS 259: Security Modeling and Analysis</li>
<li>CS 261: Optimization and Algorithmic Paradigms</li>
<li>CS 340: Networked Systems for Virtual Worlds</li>
<li>CS 344: Building an Internet Router</li>
<li>CS 355: Topics in Cryptography</li>
<li>CS 365: Randomized Algorithms</li>
</ul>


<p>c. Sufficient additional units selected from (b) and the following: CS 240E, 244E, 245, 294S<em>, 295, 341, 344B, 345, 347, 361A, 393</em>, 395<em>, 399</em>, EE 384A, 384B, 384C, 384M, 384S, 384X, 384Y</p>

<ul>
<li>CS 240E: Embedded Wireless Systems</li>
<li>CS 244E: Wireless Networking</li>
<li>CS 245: Database System Principles</li>
<li>CS 294S: Paradigm Shifts in Mobile and Social Computing Systems</li>
<li>CS 295: Software Engineering</li>
<li>CS 341: Project in Mining Massive Data Sets</li>
<li>CS 344B: Advanced Topics in Distributed Systems</li>
<li>CS 345: Advanced Topics in Database Systems</li>
<li>CS 347: Parallel and Distributed Data Management</li>
<li>CS 361A: Advanced Algorithms</li>
<li>CS 393: Computer Laboratory</li>
<li>CS 395: Independent Database Project</li>
<li>CS 399: Independent Project</li>
<li>EE 384A: Internet Routing Protocols and Standards</li>
<li>EE 384B: Mutimedia Communication over the Internet</li>
<li>EE 384C: Wireless Local Area Networks</li>
<li>EE 384M: Network Algorithms</li>
<li>EE 384S: Network Architectures and Performance Engineering</li>
<li>EE 384X: Packet Switch Architectures I</li>
<li>EE 384Y: Packet Switch Architectures II</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HE.net Colocation Facility]]></title>
    <link href="http://khakimov.github.com/blog/2012/11/15/he-dot-net-colocation-facility/"/>
    <updated>2012-11-15T16:46:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/11/15/he-dot-net-colocation-facility</id>
    <content type="html"><![CDATA[<p>I&#8217;ve read post <a href="http://www.codinghorror.com/blog/2012/10/building-servers-for-fun-and-prof-ok-maybe-just-for-fun.html">&#8220;Building Servers for Fun and Prof&#8230; OK, Maybe Just for Fun&#8221;</a> and really like it what you can easily buy and build your own server and install it in the datacenter. Especially it was cool for me, because I&#8217;m living now in Bay Area and couple huge datacenters located here.</p>

<p>I had couple servers in HE.net (dedicated server, rented from hosting company which managed them) and I always have a dream about visiting this place to see hundreds and hundreds computers in racks, routers with blinking lights and noise from cooling system. And couple weeks ago one of my friend asked me to help to manage couple his servers in Fremont, HE.net datacenter. He gave me permission and week ago, sunny Sunday I went to Fremont to check his cabinet (he rented full cabinet includes 42 Units, Power and 100 Mbps bandwidth for only $600 per month).</p>

<p><img src="http://pix.am/oLeel.jpg" alt="" /></p>

<p>They provide everything, even screwdrivers and drills if you need to maintain new server or change memory. So now I&#8217;m thinking about building new server and install it there. I also heard about datacenter in San Jose, but haven&#8217;t checked it yet. I think, people will realise what building infrastructure much cheaper and more useful (you can customize every layer) than using solutions from the &#8220;box&#8221;. Sure, I understand the difference, but it&#8217;s not always crazy to build infrastructure and save tons of money when you are doing (lean) startup.</p>

<p>And I totally agree with Jeff, build servers it&#8217;s a lot of fun! =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attacking the Internet Voting System]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/28/attacking-the-internet-voting-system/"/>
    <updated>2012-10-28T14:08:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/28/attacking-the-internet-voting-system</id>
    <content type="html"><![CDATA[<p>Today is Sunday, just finished my third week of Networking class, learned a lot about ip, tcp, udp, how tcp makes reliable data transer, whats congestion avoidance, how packets and windows works, queuing on the routers, TCP Tahoe, TCP Reno and many other interesting things.</p>

<p>It&#8217;s interesting how many things behind so &#8220;obvious&#8221; TCP/IP for example. &#8220;Where Wizards Stay Up Late: The Origins Of The Internet&#8221; book makes my discovery much more interesting, you can see &#8220;real&#8221; life of invetors, how they tried and fell and eventually built the Internet. I bet they didn&#8217;t think what it would be so popular as it is, but even so, they didn&#8217;t think for sure what it would be used as voting platform.</p>

<p>Couple days ago I read <a href="https://jhalderm.com/pub/papers/dcvoting-fc12.pdf">this paper</a> and found it very interesting.</p>

<p><img src="http://9.mshcdn.com/wp-content/uploads/2012/10/Podium.jpg" alt="" /></p>

<blockquote><p>In 2010, Washington, D.C. developed an Internet voting pilot project that was intended to allow overseas absentee voters to cast their ballots using a website. This paper describes our experience participating in this trial. Within 48 hours of the system going live, we had gained nearcomplete control of the election server. We successfully changed every vote and revealed almost every secret ballot. Election oﬃcials did not detect our intrusion for nearly two business days and might have remained unaware for far longer had we not deliberately left a prominent clue.</p></blockquote>


<p>Highly recommend to read even you don&#8217;t know/care about internet security, authors describe every steps and it looks like cyber-thriller. Spoil!</p>

<blockquote><p>After a few hours of examination, we found a shell injection vulnerability that eventually allowed us to compromise the web application server.<br/>&#8230;<br/>We also gained access to the database by ﬁnding credentials in the bash history ﬁle (mysql -h 10.1.143.75 -udvbm -pP@ssw0rd).<br/>&#8230;<br/>After about 3.5 hours using the cracker’s default settings, we recovered the secondary administrator password cisco123 from a salted MD5 hash.<br/>&#8230;<br/>We realized that one of the default logins to the terminal server (user: admin, password: admin)<br/>&#8230;<br/>The terminal server provided built-in support for keystroke logging of serial console sessions and forwarding of logged keystrokes to a remote syslog server, which we enabled and conﬁgured to forward to one of our machines. This allowed us to observe in real time as system administrators logged in and conﬁgured the switches, and to capture the switches’ administrative password, !@#123abc.<br/>&#8230;<br/>We found a pair of webcams on the DVBM network both publicly accessible without any password that showed views of the server room that housed the pilot. <br/>&#8230;</p></blockquote>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behind the hacks]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/25/behind-the-hacks/"/>
    <updated>2012-10-25T18:05:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/25/behind-the-hacks</id>
    <content type="html"><![CDATA[<p>I&#8217;ve realized what I have bunch of emails where I&#8217;ve send people &#8220;bugs&#8221; on their websites (I&#8217;ll share here only that already fixed &#8220;bugs&#8221;). As example, once I&#8217;ve read about startup http://1.ai on HN. I thought such a nice domain name and interesting .ai zone =) Couple checks and pretty annoy xss:</p>

<blockquote><p>Hey guys,</p><p>Read about you on HN, first of all thanks for the great job and don&#8217;t<br/>forget to close xss here<br/>http://1.ai/%3Cimg%20src=%22http://i.imgur.com/aAJSR.jpg%22%3E</p><p>thanks</p><p>-rus</p></blockquote>


<p>just after that i&#8217;ve got email:</p>

<blockquote><p>Hello Ruslan,<br/>thank you for your help - will notify the sysadmin asap :)<br/>Enjoy the account and feel free to let me know if you do have suggestions/security ideas. <br/>At the moment beside relatively small things the permissions and security should guarantee that <br/>everything runs smoothly but we will certainly do more fixes (like this one) over time !<br/>best Regards<br/>David</p></blockquote>


<p>That&#8217;s cool when people response very fast and with positive feedback, usually people just ignore emails like this, I have no idea why. Maybe because it seems strange, maybe they don&#8217;t care about that till time when somebody use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pthreads and Shared Variables]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/19/pthreads-and-shared-variables/"/>
    <updated>2012-10-19T16:17:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/19/pthreads-and-shared-variables</id>
    <content type="html"><![CDATA[<p>I started yesterday with a ascii picture that shows how threads looks like. Now I want to add variable &#8221;<strong>a</strong>&#8221; into each thread:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Master Thread
</span><span class='line'>        |
</span><span class='line'>unsigned int a = 0;
</span><span class='line'>        |
</span><span class='line'>        |        create workers with pthread_create()
</span><span class='line'>        |
</span><span class='line'>      // \\      workers start up
</span><span class='line'>     / | | \
</span><span class='line'>     | | | |
</span><span class='line'>     a a a a     workers do a++ in loop jobs (thread routine)
</span><span class='line'>     | | | |
</span><span class='line'>     \ \ / /
</span><span class='line'>      \\ //      workers terminate
</span><span class='line'>        |
</span><span class='line'>        |        join workers with pthread_join()
</span><span class='line'>        |
</span><span class='line'>  Master Thread</span></code></pre></td></tr></table></div></figure>


<p>This picture shows the possibility of synchronization errors when every thread has same access to variable <strong>a</strong>. Let code some example of this problem:</p>

<figure class='code'><figcaption><span>shared.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define N 100000</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">job</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">pthread_t</span> <span class="n">tid1</span><span class="p">,</span> <span class="n">tid2</span><span class="p">;</span>
</span><span class='line'>   <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="p">(</span><span class="n">N</span> <span class="o">*</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Nope! a = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;OK! a = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">job</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>   <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">a</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>shared.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="n">shared</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">shared</span> <span class="o">&amp;&amp;</span> <span class="p">.</span><span class="o">/</span><span class="n">shared</span>
</span><span class='line'><span class="n">Nope</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">161406</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">shared</span>
</span><span class='line'><span class="n">Nope</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">162099</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">shared</span>
</span><span class='line'><span class="n">Nope</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">133299</span>
</span></code></pre></td></tr></table></div></figure>


<p>hmm, strange, isn&#8217;t? It happens because of improperly synchronization.</p>

<figure class='code'><figcaption><span>shared.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">_job:</span>
</span><span class='line'><span class="mf">0000000100000e80</span>  <span class="n">pushq</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mf">0000000100000e81</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rsp</span><span class="p">,</span><span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mf">0000000100000e84</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span><span class="mh">0xf8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="mf">0000000100000e88</span>  <span class="n">movl</span>  <span class="err">$</span><span class="mh">0x00000000</span><span class="p">,</span><span class="mh">0xe4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span> <span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="mf">0000000100000e8</span><span class="n">f</span>  <span class="n">jmp</span> <span class="mh">0x100000ea9</span>
</span><span class='line'><span class="p">;</span> <span class="n">loop</span>
</span><span class='line'><span class="mf">0000000100000e91</span>  <span class="n">movl</span>  <span class="mh">0x000001e1</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span> <span class="p">;</span> <span class="n">our</span> <span class="n">global</span> <span class="n">a</span>
</span><span class='line'><span class="mf">0000000100000e97</span>  <span class="n">addl</span>  <span class="err">$</span><span class="mh">0x01</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>            <span class="p">;</span> <span class="n">a</span><span class="o">++</span>
</span><span class='line'><span class="mf">0000000100000e9</span><span class="n">a</span>  <span class="n">movl</span>  <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="mh">0x000001d8</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span> <span class="p">;</span> <span class="n">save</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ea0</span>  <span class="n">movl</span>  <span class="mh">0xe4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ea3</span>  <span class="n">addl</span>  <span class="err">$</span><span class="mh">0x01</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>            <span class="p">;</span> <span class="n">i</span><span class="o">++</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ea6</span>  <span class="n">movl</span>  <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="mh">0xe4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ea9</span>  <span class="n">movl</span>  <span class="mh">0xe4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">eac</span>  <span class="n">cmpl</span>  <span class="err">$</span><span class="mh">0x0001869f</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>      <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">eb1</span>  <span class="n">jle</span> <span class="mh">0x100000e91</span>             <span class="p">;</span> <span class="n">check</span> <span class="n">and</span> <span class="n">jump</span>
</span><span class='line'><span class="p">;</span> <span class="n">jle</span> <span class="o">-</span> <span class="n">less</span> <span class="n">or</span> <span class="n">equal</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">eb3</span>  <span class="n">movq</span>  <span class="err">$</span><span class="mh">0x00000000</span><span class="p">,</span><span class="mh">0xe8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ebb</span>  <span class="n">movq</span>  <span class="mh">0xe8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span><span class="o">%</span><span class="n">rax</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ebf</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mh">0xf0</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ec3</span>  <span class="n">movq</span>  <span class="mh">0xf0</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span><span class="o">%</span><span class="n">rax</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ec7</span>  <span class="n">popq</span>  <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="mo">0000000100000</span><span class="n">ec8</span>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is how our loop in function <strong>job</strong> looks in machine code (otool -Vt ./shared). And as you can also see, each thread load/save data from same memory address 0x000001e1(%rip), that&#8217;s why we always get wrong answer, because thread compete with each other and improperly. How to fix it? We have to lock variable, change it and then unlock it to allow other threads to change it:</p>

<figure class='code'><figcaption><span>shared2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define N 100000</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">job</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">pthread_mutex_t</span> <span class="n">mutexA</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">pthread_t</span> <span class="n">tid1</span><span class="p">,</span> <span class="n">tid2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutexA</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">job</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="p">(</span><span class="n">N</span> <span class="o">*</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Nope! a = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;OK! a = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_mutex_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutexA</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span>
</span><span class='line'><span class="nf">job</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>   <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      Lock mutex prior to updating the value in the shared</span>
</span><span class='line'><span class="cm">      variable and unlock it upon updating. </span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pthread_mutex_lock</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">mutexA</span><span class="p">);</span>
</span><span class='line'>      <span class="n">a</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutexA</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it looks much better!</p>

<figure class='code'><figcaption><span>shared2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="n">shared2</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">shared2</span> <span class="o">&amp;&amp;</span> <span class="p">.</span><span class="o">/</span><span class="n">shared2</span>
</span><span class='line'><span class="n">OK</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">200000</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">shared2</span>
</span><span class='line'><span class="n">OK</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">200000</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">shared2</span>
</span><span class='line'><span class="n">OK</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">200000</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is it! Now we can use shared variables in our threads and build something interesting. In next post I will write about <strong>thread-safety</strong> and how to write thread-safe function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C Posix Threads boot camp]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/18/c-posix-threads-boot-camp/"/>
    <updated>2012-10-18T19:03:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/18/c-posix-threads-boot-camp</id>
    <content type="html"><![CDATA[<p>The White Rabbit put on his spectacles,
&#8220;Where shall I begin, please your Majesty?&#8221; he asked.
&#8220;Begin at the beginning,&#8221; the King said, very gravely,
&#8220;and go on till you come to the end: then stop.&#8221;</p>

<p>Lewis Carroll, Alice&#8217;s Adventures in Wonderland</p>

<p>This post is about threads and the reason why I&#8217;m writing this because I want to know more and more about thread, but before that I have to repeat and refresh everything about this huge topic. I saw funny qoute about the process of learning and doing concurrency code</p>

<p>&#8220;i don&#8217;t know threads!,&#8221; then &#8220;I got it! I know how it works!,&#8221; then &#8220;I don&#8217;t know threads!&#8221; and so on.</p>

<p>So, I&#8217;m going to use here the threads model that is called POSIX threads or Pthreads. Brief story you can read on wikipedia (http://en.wikipedia.org/wiki/POSIX_Threads)[here.] The main thing that its available on many Unix-like OS, and if you are using mac or linux I&#8217;m sure you have file name pthread.h in your libraries directory. The best to start is write &#8220;Hello World&#8221; with threads.</p>

<pre><code>  Master Thread
        |
        |        create workers with pthread_create()
        |
      // \\      workers start up
     / | | \
     | | | |
     | | | |     workers do their jobs (thread routine)
     | | | |
     \ \ / /
      \\ //      workers terminate
        |
        |        join workers with pthread_join()
        |
  Master Thread
</code></pre>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">/* posix thread */</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="cm">/* </span>
</span><span class='line'><span class="cm">   local variable which will be used to store the thread ID of</span>
</span><span class='line'><span class="cm">   the peer thread</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_t</span> <span class="n">tid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="cm">/* </span>
</span><span class='line'><span class="cm">   pthread_create function creates a new thread (obvious)</span>
</span><span class='line'><span class="cm">   and runs the thread_routine in the context of the new thread</span>
</span><span class='line'><span class="cm">   with an input arg NULL (just after thread_routine). In our case</span>
</span><span class='line'><span class="cm">   we just run thread_routine without any argument. </span>
</span><span class='line'><span class="cm">   when the call to pthread_create returns - tid contains the ID</span>
</span><span class='line'><span class="cm">   the new thread</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_routine</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="cm">/*</span>
</span><span class='line'><span class="cm">   the main thread waits for the peer thread to terminate with</span>
</span><span class='line'><span class="cm">   the call pthread_join.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>   <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>compile and run</p>

<p>○ gcc hello.c -o hello &amp;&amp; ./hello
Hello world!</p>

<p>Let&#8217;s play a little bit with pthreads, you will see this is much easier than it looks like now.</p>

<figure class='code'><figcaption><span>hello2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">pthread_t</span> <span class="n">tid</span><span class="p">;</span>
</span><span class='line'>   <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_routine</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[1] I&#39;ve create a thread %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">tid</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[2] pthread_join and wait till its finish his job</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[6] Thread %ld terminated. Now in main!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">tid</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[7] Time to clean up and exit. Bye!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">dot</span> <span class="o">=</span> <span class="sc">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">[3] I&#39;m inside the thread %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pthread_self</span><span class="p">());</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">[4] Hello world! I&#39;m working...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">%d</span><span class="se">\r</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">--</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">[5] Done! Returning to the main thread!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>○ gcc hello2.c -o hello2 &amp;&amp; ./hello2</p>

<figure class='code'><figcaption><span>hello2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">create</span> <span class="n">a</span> <span class="kr">thread</span> <span class="mi">4513894400</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">inside</span> <span class="n">the</span> <span class="kr">thread</span> <span class="mi">4513894400</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pthread_join</span> <span class="n">and</span> <span class="n">wait</span> <span class="n">till</span> <span class="n">its</span> <span class="n">finish</span> <span class="n">his</span> <span class="n">job</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="n">Hello</span> <span class="n">world</span><span class="o">!</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">working</span><span class="p">...</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="n">Done</span><span class="o">!</span> <span class="n">Returning</span> <span class="n">to</span> <span class="n">the</span> <span class="n">main</span> <span class="kr">thread</span><span class="o">!</span>
</span><span class='line'><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="n">Thread</span> <span class="mi">4513894400</span> <span class="n">terminated</span><span class="p">.</span> <span class="n">Now</span> <span class="n">in</span> <span class="n">main</span><span class="o">!</span>
</span><span class='line'><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="n">Time</span> <span class="n">to</span> <span class="n">clean</span> <span class="n">up</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span> <span class="n">Bye</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve added while loop into thread_routine function to show how pthread_join works (waits for thread termination). Notice that the pthread_join function can only wait for a specific thread to terminate. Let&#8217;s try to make 5 thread and see how it works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM_THREADS 5</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">pthread_t</span> <span class="n">tid</span><span class="p">[</span><span class="n">NUM_THREADS</span><span class="p">];</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_THREADS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_routine</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[t %d][1] I&#39;ve create a thread %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">tid</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_THREADS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[t %d][2] pthread_join and wait till its finish his job</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[t %d][6] Thread %ld terminated!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">tid</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[7] Time to clean up and exit. Bye!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">threadNum</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">dot</span> <span class="o">=</span> <span class="sc">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">[t %d]</span><span class="se">\t</span><span class="s">[3] I&#39;m inside the thread %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">threadNum</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pthread_self</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">// printf(&quot;\t[4] Hello world! I&#39;m working...\n&quot;);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\v</span><span class="s">%*d</span><span class="se">\r</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">threadNum</span><span class="o">*</span><span class="mi">15</span><span class="p">,</span> <span class="n">i</span><span class="o">--</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">[t %d][5] Done! Returning to the main thread!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">threadNum</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like matrix in my terminal.</p>

<p><img src="http://pix.am/urR5.png" alt="" /></p>

<p>Before we start talking about <strong>detaching thread</strong>, you can play with this code and threads, if you don&#8217;t understand something try to change code and see how it will work. In my case was a problem with pthread_join, but after couple examples I&#8217;ve realized how it works and moved on.</p>

<p>By default, threads created joinable and joinable thread can be reaped and killed by other threads. On other case, detached thread cannot be reaped or killed by other threads. Its memory resources are freed automatically by the system when it terminates. To &#8220;detach&#8221; the thread we have to use <strong>pthread_detach</strong> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">open_listenfd</span><span class="p">(</span><span class="kt">int</span> <span class="n">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_t</span> <span class="n">tid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">connfd_p</span><span class="p">,</span> <span class="n">listenfd</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">clientlen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">clientaddr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">port</span> <span class="o">=</span> <span class="mi">1337</span><span class="p">;</span>
</span><span class='line'>    <span class="n">listenfd</span> <span class="o">=</span> <span class="n">open_listenfd</span><span class="p">(</span><span class="n">port</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">connfd_p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>        <span class="o">*</span><span class="n">connfd_p</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">clientaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clientlen</span><span class="p">);</span>
</span><span class='line'>        <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_routine</span><span class="p">,</span> <span class="n">connfd_p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">open_listenfd</span><span class="p">(</span><span class="kt">int</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">listenfd</span><span class="p">,</span> <span class="n">optval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">serveraddr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">listenfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">optval</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bzero</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">serveraddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serveraddr</span><span class="p">));</span>
</span><span class='line'>    <span class="n">serveraddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">serveraddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">serveraddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">short</span><span class="p">)</span> <span class="n">port</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">serveraddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serveraddr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">listenfd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span><span class="o">*</span>
</span><span class='line'><span class="nf">thread_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">connfd</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pthread_detach</span><span class="p">(</span><span class="n">pthread_self</span><span class="p">());</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;New incoming connection...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\r</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">--</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Done! Close connection!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>huh, tired a little bit, was a C maraphone for couple hours. Here is example of server which waiting connections on tcp port 1337, if somebody connected - creates new thread and start doing his job. I&#8217;ll comment this code in the next post, but it works very well and now you can build your&#8217;s version of web server.</p>

<p>Soon I&#8217;ll write about sharing variables between threads, using mutexes and how to avoid dead locks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quadrocopter in the wild]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/06/quadrocopter-in-the-wild/"/>
    <updated>2012-10-06T19:27:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/06/quadrocopter-in-the-wild</id>
    <content type="html"><![CDATA[<p>Today went to the park in Downtown Palo Alto, nice place to test my pilot skills. It was not bad, couple times I did wrong with direction (coulnd&#8217;t spin around the axle, get lost the control). Spin around the axle is going to be my next exercise, because I can fly back and forth, but can&#8217;t turn around and fly with same side. Anyway, that was cool, almost 20 minutes of disconnected from the world.</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/12pnL0ZyLeo?rel=0" frameborder="0" allowfullscreen></iframe>


<p>Of course this is not the end and I&#8217;m going to improve this aircraft. I&#8217;m thinking about couple really awesome things, like glasses + camera on quadrocopter:</p>

<p><img src="http://static.ddmcdn.com/gif/video-glasses-1.jpg" alt="" /></p>

<p>or (good one in my case)</p>

<p>NAZA controller with GPS module</p>

<p><img src="http://s4e453e5a36d54.img.gostorego.com/802754/cdn/media/s4/e4/53/e5/a3/6d/54/catalog/product/cache/1/image/370x/9df78eab33525d08d6e5fb8d27136e95/d/j/djinaza.jpg" alt="" /></p>

<p>ps: quadrocopter + kinect</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/A52FqfOi0Ek?rel=0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekends project: Quadrocopter v1.0]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/02/weekends-project-quadrocopter-v1-dot-0/"/>
    <updated>2012-10-02T12:03:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/02/weekends-project-quadrocopter-v1-dot-0</id>
    <content type="html"><![CDATA[<p>Was an interesting quest to build this thing. At the end I&#8217;ve almost gave up about even test drive it and couple weeks it just waited till my friend asked to try outside, because I&#8217;ve tried to test it at home and it wasn&#8217;t good idea (no pilot expirience, didn&#8217;t know how to controls work and tried to start with perfect vertical lift-off and of course it didn&#8217;t work and I thought something wrong with my hands/software/engines/controllers). <em>An old story, we are afraid to fail at something, so it was really easy to give up than just once test it outside.</em></p>

<p>Anyway, I did it and it flies perfectly. Time to improve pilot/control skills and later will upgrade it with camera and maybe with 3d glasses.</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/1ws0lYtuihc?rel=0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quora Digest 2]]></title>
    <link href="http://khakimov.github.com/blog/2012/08/15/quora-digest-2/"/>
    <updated>2012-08-15T11:10:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/08/15/quora-digest-2</id>
    <content type="html"><![CDATA[<ol>
<li><a href="http://www.quora.com/Lifestyle/What-are-some-ways-to-live-a-simple-lifestyle">What are some ways to live a simple lifestyle?</a> All this being said, enjoy yourself. Live simply to allow yourself more time and energy to actually go out and do things, to read things, to learn things, to make things, to spend time with people, to exercise, to travel.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple script and Skype]]></title>
    <link href="http://khakimov.github.com/blog/2012/08/13/apple-script-and-skype/"/>
    <updated>2012-08-13T17:02:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/08/13/apple-script-and-skype</id>
    <content type="html"><![CDATA[<p>Spent an hour to figure out how applescript works and wrote some epicly awesome tool what helps to kill anybody phone just doing crash pool calls repeatedly every N sec.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="nv">numberOfAttempts</span> <span class="k">to</span> <span class="mi">100</span> <span class="c"># how many times?</span>
</span><span class='line'><span class="k">set</span> <span class="nv">callToAnumber</span> <span class="k">to</span> <span class="s2">&quot;echo123&quot;</span> <span class="c"># put his number here</span>
</span><span class='line'><span class="k">set</span> <span class="nv">attemptInterval</span> <span class="k">to</span> <span class="mi">90</span> <span class="c"># call each 90 sec</span>
</span><span class='line'><span class="k">set</span> <span class="nv">callAttemptsCounter</span> <span class="k">to</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">repeat</span> <span class="nv">numberOfAttempts</span> <span class="k">times</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Skype&quot;</span>
</span><span class='line'>      <span class="nv">send</span> <span class="nv">command</span> <span class="s2">&quot;CALL &quot;</span> <span class="o">&amp;</span> <span class="nv">callToAnumber</span> <span class="nv">script</span> <span class="na">name</span> <span class="s2">&quot;Call&quot;</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>  <span class="nb">delay</span> <span class="nv">attemptInterval</span>
</span><span class='line'>  <span class="k">set</span> <span class="nv">callAttemptsCounter</span> <span class="k">to</span> <span class="nv">callAttemptsCounter</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<p>in terminal then <strong>osascript scriptname</strong> and BOOM! 100 calls every 90 secs. Nothing interesting, but applescript has hidden value. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Money CAN buy happiness]]></title>
    <link href="http://khakimov.github.com/blog/2012/08/13/money-can-buy-happiness/"/>
    <updated>2012-08-13T16:05:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/08/13/money-can-buy-happiness</id>
    <content type="html"><![CDATA[<ol>
<li><p><a href="http://www.quora.com/Life-Lessons/What-life-lessons-are-counter-intuitive-or-go-against-common-sense-or-wisdom">What life lessons are counter-intuitive or go against common sense or wisdom?</a> Focus on spending this money in ways that improve your happiness and reduce your stress levels, and be cautious about using it to buy things that other people say you &#8220;should&#8221; buy.</p></li>
<li><p><a href="http://www.quora.com/Life-Advice/How-do-I-stop-myself-feeling-low-when-I-think-of-people-who-have-achieved-so-much-in-life">How do I stop myself feeling low when I think of people who have achieved so much in life?</a> You stop feeling low, by stop waiting. History is full of people who did remarkable things at every age. Become yourself.</p></li>
<li><p><a href="http://www.quora.com/What-was-the-turning-point-in-the-lives-of-various-Quora-users-and-how-has-it-turned-them-into-the-person-they-are-today">What was the turning point in the lives of various Quora users, and how has it turned them into the person they are today?</a> Brian Fey and his story is amazing, read it!</p></li>
<li><p><a href="http://www.quora.com/What-are-some-of-the-best-quotes-about-how-to-live-your-life">What are some of the best quotes about how to live your life?</a></p></li>
</ol>


<blockquote><p>It is not the critic who counts; not the man who points out how the strong man stumbles, or where the doer of deeds could have done them better. The credit belongs to the man who is actually in the arena, whose face is marred by dust and sweat and blood; who strives valiantly; who errs, who comes short again and again, because there is no effort without error and shortcoming; but who does actually strive to do the deeds; who knows great enthusiasms, the great devotions; who spends himself in a worthy cause; who at the best knows in the end the triumph of high achievement, and who at the worst, if he fails, at least fails while daring greatly, so that his place shall never be with those cold and timid souls who neither know victory nor defeat.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebrand blog and some new feature]]></title>
    <link href="http://khakimov.github.com/blog/2012/08/12/rebrand-blog-and-some-new-feature/"/>
    <updated>2012-08-12T19:09:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/08/12/rebrand-blog-and-some-new-feature</id>
    <content type="html"><![CDATA[<p>Today is Sunday and as usually I spent this day reading and hacking. K&amp;R for sure is a best book ever if you want to understand C and the most important part is exercises. Very interesting and useful. But today I will not talk about programming, I want to introduce new version of this blog with new design and one feature which, I hope, will provide more interactive.</p>

<p>I&#8217;m not crazy and understand nobody read this and this lines I wrote only for myself, but anyway it sounds interesting, why not to try?</p>

<p>I added function to be able to comment any part of post, even just one word. I think this is going to be very useful to comment some code. Double click on any text and will see [comment] button, like this:</p>

<p><img src="http://pix.am/yM4z.png" alt="Example screenshot with comment button" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eventmachine&#39;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">module</span> <span class="nn">EchoServer</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">post_init</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="s2">&quot;-- someone connected to the echo server!&quot;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">receive_data</span> <span class="n">data</span>
</span><span class='line'>     <span class="n">send_data</span> <span class="s2">&quot;&gt;&gt;&gt;you sent: </span><span class="si">#{</span><span class="n">data</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>     <span class="n">close_connection</span> <span class="k">if</span> <span class="n">data</span> <span class="o">=~</span> <span class="sr">/quit/i</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">unbind</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="s2">&quot;-- someone disconnected from the echo server!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Note that this will block current thread.</span>
</span><span class='line'><span class="no">EventMachine</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">EventMachine</span><span class="o">.</span><span class="n">start_server</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8081</span><span class="p">,</span> <span class="no">EchoServer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m also want to share interesting posts I reading during the day with my thoughts and comments. Mostly from <a href="http://news.ycombinator.com/">HN</a> and <a href="http://quora.com">Quora</a>. Will see how it will work, some examples what I&#8217;m reading on <strong>quora</strong>:</p>

<ol>
<li><p><a href="http://www.quora.com/Sleep/What-is-the-ideal-time-to-go-to-bed">What is the ideal time to go to bed?</a>.</p></li>
<li><p><a href="http://www.quora.com/What-important-things-do-people-learn-in-university-that-would-be-hard-to-learn-on-their-own">What important things do people learn in university that would be hard to learn on their own?</a>.</p></li>
<li><p><a href="http://www.quora.com/How-much-money-does-a-successful-high-end-restaurant-make">How much money does a successful, high-end restaurant make?</a>.</p></li>
</ol>


<p>Any ideas/thought/sugestions?</p>
]]></content>
  </entry>
  
</feed>
