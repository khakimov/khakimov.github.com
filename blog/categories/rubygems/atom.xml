<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubygems | Doing things]]></title>
  <link href="http://khakimov.github.com/blog/categories/rubygems/atom.xml" rel="self"/>
  <link href="http://khakimov.github.com/"/>
  <updated>2012-11-25T20:32:05-08:00</updated>
  <id>http://khakimov.github.com/</id>
  <author>
    <name><![CDATA[khakimov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My first gem]]></title>
    <link href="http://khakimov.github.com/blog/2012/05/24/my-first-gem/"/>
    <updated>2012-05-24T16:04:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/05/24/my-first-gem</id>
    <content type="html"><![CDATA[<p>Long time no post here, was a busy month. Learning a lot of stuff about algorithms as I said before and now I know how packers work (like zip, tar etc). Will be also good to complete of those algorithms on ruby, like binary tree search and tries, will see.</p>

<p>Btw, doing some stuff with rails now I've relised my first gem. It called <a href="https://github.com/khakimov/id_encoder">id_encoder</a> and this is pretty cool encoder which helps you generating consecutive, predictable URLs. Here is description:</p>

<blockquote><p>Ruby implementation for generating Tiny URL- and bit.ly-like URLs.</p>

<p>A bit-shuffling approach is used to avoid generating consecutive, predictable URLs. However, the algorithm is deterministic and will guarantee that no collisions will occur.</p>

<p>The URL alphabet is fully customizable and may contain any number of characters. By default, digits and lower-case letters are used, with some removed to avoid confusion between characters like o, O and 0. The default alphabet is shuffled and has a prime number of characters to further improve the results of the algorithm.</p>

<p>The block size specifies how many bits will be shuffled. The lower BLOCK_SIZE bits are reversed. Any bits higher than BLOCK_SIZE will remain as is. BLOCK_SIZE of 0 will leave all bits unaffected and the algorithm will simply be converting your integer to a different base.</p>

<p>The intended use is that incrementing, consecutive integers will be used as keys to generate the short URLs. For example, when creating a new URL, the unique integer ID assigned by a database could be used to generate the URL by using this module. Or a simple counter may be used. As long as the same integer is not used twice, the same short URL will not be generated twice.</p>

<p>The module supports both encoding and decoding of URLs. The min_length parameter allows you to pad the URL if you want it to be a specific length.</p></blockquote>

<p>In few words - you can use it with uniq integer of id record from database and convert to symbols:</p>

<p><code>
IdEncoder::UrlEncoder.encode_url(10) # =&gt; "csqsc"
IdEncoder::UrlEncoder.decode_url('csqsc') # =&gt; 10
</code></p>

<p>cool, isn't? Epicly awesome part was using "low" ruby like OR/AND, Bitwise &lt;&lt;. Looks like you coding asembler or some machine binary language. It's remind me childhod, that I was young and trees was so big I did some asembler code (mov ax, bx ... int 21h ...)</p>

<p>So, next big thing is going to be RSpect. I really want to start using tests and start projects from test and only then code. It looks cool when you know what to do with test, but now this is hard to switch from code to test first. Will update my gem with tests soon!</p>
]]></content>
  </entry>
  
</feed>
