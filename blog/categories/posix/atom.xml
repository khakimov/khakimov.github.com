<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: posix | curious and driven]]></title>
  <link href="http://khakimov.github.com/blog/categories/posix/atom.xml" rel="self"/>
  <link href="http://khakimov.github.com/"/>
  <updated>2013-03-12T22:52:03-07:00</updated>
  <id>http://khakimov.github.com/</id>
  <author>
    <name><![CDATA[khakimov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C Posix Threads boot camp]]></title>
    <link href="http://khakimov.github.com/blog/2012/10/18/c-posix-threads-boot-camp/"/>
    <updated>2012-10-18T19:03:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/10/18/c-posix-threads-boot-camp</id>
    <content type="html"><![CDATA[<p>The White Rabbit put on his spectacles,
"Where shall I begin, please your Majesty?" he asked.
"Begin at the beginning," the King said, very gravely,
"and go on till you come to the end: then stop."</p>

<p>Lewis Carroll, Alice's Adventures in Wonderland</p>

<p>This post is about threads and the reason why I'm writing this because I want to know more and more about thread, but before that I have to repeat and refresh everything about this huge topic. I saw funny qoute about the process of learning and doing concurrency code</p>

<p>"i don't know threads!," then "I got it! I know how it works!," then "I don't know threads!" and so on.</p>

<p>So, I'm going to use here the threads model that is called POSIX threads or Pthreads. Brief story you can read on wikipedia (http://en.wikipedia.org/wiki/POSIX_Threads)[here.] The main thing that its available on many Unix-like OS, and if you are using mac or linux I'm sure you have file name pthread.h in your libraries directory. The best to start is write "Hello World" with threads.</p>

<pre><code>  Master Thread
        |
        |        create workers with pthread_create()
        |
      // \\      workers start up
     / | | \
     | | | |
     | | | |     workers do their jobs (thread routine)
     | | | |
     \ \ / /
      \\ //      workers terminate
        |
        |        join workers with pthread_join()
        |
  Master Thread
</code></pre>

<p>```c hello.c
/<em> posix thread </em>/</p>

<h1>include &lt;pthread.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>void <em>thread_routine(void </em>arg);</p>

<p>int main()
{</p>

<p>   /<em>
   local variable which will be used to store the thread ID of
   the peer thread
   </em>/</p>

<p>   pthread_t tid;</p>

<p>   /<em>
   pthread_create function creates a new thread (obvious)
   and runs the thread_routine in the context of the new thread
   with an input arg NULL (just after thread_routine). In our case
   we just run thread_routine without any argument.
   when the call to pthread_create returns - tid contains the ID
   the new thread
   </em>/</p>

<p>   pthread_create(&amp;tid, NULL, thread_routine, NULL);</p>

<p>   /<em>
   the main thread waits for the peer thread to terminate with
   the call pthread_join.
   </em>/
   pthread_join(tid, NULL);
   exit(0);
}</p>

<p>void <em>thread_routine(void </em>arg)
{
   printf("Hello world!\n");
   return NULL;
}
```
compile and run</p>

<p>○ gcc hello.c -o hello &amp;&amp; ./hello
Hello world!</p>

<p>Let's play a little bit with pthreads, you will see this is much easier than it looks like now.</p>

<p>```c hello2.c</p>

<h1>include &lt;pthread.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>void <em>thread_routine(void </em>arg);</p>

<p>int main()
{
   pthread_t tid;
   pthread_create(&amp;tid, NULL, thread_routine, NULL);
   printf("[1] I've create a thread %ld\n", (long)tid);
   printf("[2] pthread_join and wait till its finish his job\n");
   pthread_join(tid, NULL);
   printf("[6] Thread %ld terminated. Now in main!\n", (long)tid);
   printf("[7] Time to clean up and exit. Bye!\n");
   exit(0);
}</p>

<p>void <em>thread_routine(void </em>arg)
{</p>

<pre><code>int i = 1000000;
char dot = '.';
printf("\t[3] I'm inside the thread %ld\n", (long)pthread_self());
printf("\t[4] Hello world! I'm working...\n");
while(i != 0)
    printf("\t%d\r", i--);
printf("\t[5] Done! Returning to the main thread!\n");
return NULL;
</code></pre>

<p>}
```
○ gcc hello2.c -o hello2 &amp;&amp; ./hello2</p>

<p><code>
[1] I've create a thread 4513894400
  [3] I'm inside the thread 4513894400
[2] pthread_join and wait till its finish his job
  [4] Hello world! I'm working...
  [5] Done! Returning to the main thread!
[6] Thread 4513894400 terminated. Now in main!
[7] Time to clean up and exit. Bye!
</code></p>

<p>I've added while loop into thread_routine function to show how pthread_join works (waits for thread termination). Notice that the pthread_join function can only wait for a specific thread to terminate. Let's try to make 5 thread and see how it works:</p>

<p>```c</p>

<h1>include &lt;pthread.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>define NUM_THREADS 5</h1>

<p>void <em>thread_routine(void </em>arg);</p>

<p>int main()
{
   pthread_t tid[NUM_THREADS];
   int i;</p>

<pre><code>for(i = 0; i &lt; NUM_THREADS; i++) {
    pthread_create(&amp;tid[i], NULL, thread_routine, (void *) &amp;i);
    printf("[t %d][1] I've create a thread %ld\n", i, (long)tid);
}

for(i = 0; i &lt; NUM_THREADS; i++) {
    printf("[t %d][2] pthread_join and wait till its finish his job\n", i);
    pthread_join(tid[i], NULL);
    printf("[t %d][6] Thread %ld terminated!\n", i, (long)tid[i]);
}
printf("[7] Time to clean up and exit. Bye!\n");
exit(0);
</code></pre>

<p>}</p>

<p>void <em>thread_routine(void </em>arg)
{</p>

<pre><code>int threadNum = *(int *)arg;
int i = 100000;
char dot = '.';
printf("\t[t %d]\t[3] I'm inside the thread %ld\n", threadNum, (long)pthread_self());
// printf("\t[4] Hello world! I'm working...\n");
while(i != 0) {
    printf("\v%*d\r", threadNum*15, i--);
}
printf("\t[t %d][5] Done! Returning to the main thread!\n", threadNum);
return NULL;
</code></pre>

<p>}
```</p>

<p>Looks like matrix in my terminal.</p>

<p><img src="http://pix.am/urR5.png" alt="" /></p>

<p>Before we start talking about <strong>detaching thread</strong>, you can play with this code and threads, if you don't understand something try to change code and see how it will work. In my case was a problem with pthread_join, but after couple examples I've realized how it works and moved on.</p>

<p>By default, threads created joinable and joinable thread can be reaped and killed by other threads. On other case, detached thread cannot be reaped or killed by other threads. Its memory resources are freed automatically by the system when it terminates. To "detach" the thread we have to use <strong>pthread_detach</strong> function.</p>

<p>```c</p>

<h1>include &lt;pthread.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;strings.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;sys/types.h></h1>

<p>void <em>thread_routine(void </em>arg);</p>

<p>int open_listenfd(int port);</p>

<p>int main()
{</p>

<pre><code>pthread_t tid;
int *connfd_p, listenfd, port, clientlen = sizeof(struct sockaddr_in);
struct sockaddr_in clientaddr;

port = 1337;
listenfd = open_listenfd(port);
while(1) {
    connfd_p = malloc(sizeof(int));
    *connfd_p = accept(listenfd, (void *) &amp;clientaddr, &amp;clientlen);
    pthread_create(&amp;tid, NULL, thread_routine, connfd_p);
}
exit(0);
</code></pre>

<p>}</p>

<p>int
open_listenfd(int port)
{</p>

<pre><code>int listenfd, optval = 1;
struct sockaddr_in serveraddr;

if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)
    return -1;

if(setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&amp;optval, sizeof(int)) &lt; 0)
    return -2;

bzero((char *)&amp;serveraddr, sizeof(serveraddr));
serveraddr.sin_family = AF_INET;
serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
serveraddr.sin_port = htons((unsigned short) port);
if(bind(listenfd, (void *)&amp;serveraddr, sizeof(serveraddr)) &lt; 0)
    return -3;

if(listen(listenfd, 1024) &lt; 0)
    return -4;

return listenfd;
</code></pre>

<p>}</p>

<p>void<em>
thread_routine(void </em>arg)
{</p>

<pre><code>int connfd = *((int *) arg);
pthread_detach(pthread_self());
printf("New incoming connection...\n");
int i = 1000000;
while(i != 0)
    printf("%d\r", i--);
printf("Done! Close connection!\n");
free(arg);
close(connfd);
return NULL;
</code></pre>

<p>}
```</p>

<p>huh, tired a little bit, was a C maraphone for couple hours. Here is example of server which waiting connections on tcp port 1337, if somebody connected - creates new thread and start doing his job. I'll comment this code in the next post, but it works very well and now you can build your's version of web server.</p>

<p>Soon I'll write about sharing variables between threads, using mutexes and how to avoid dead locks.</p>
]]></content>
  </entry>
  
</feed>
