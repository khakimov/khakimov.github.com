<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | nameless]]></title>
  <link href="http://khakimov.github.com/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://khakimov.github.com/"/>
  <updated>2014-08-17T18:06:23-07:00</updated>
  <id>http://khakimov.github.com/</id>
  <author>
    <name><![CDATA[khakimov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X-RateLimit-Limit API]]></title>
    <link href="http://khakimov.github.com/blog/2012/06/18/x-ratelimit-limit-api/"/>
    <updated>2012-06-18T14:38:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/06/18/x-ratelimit-limit-api</id>
    <content type="html"><![CDATA[<p>some api have a limit requests, like to 5000 per hour as github has:
○ curl -i https://api.github.com/users/whatever</p>

<p><code>
HTTP/1.1 200 OK
Status: 200 OK
X-RateLimit-Limit: 5000
X-RateLimit-Remaining: 4966
</code></p>

<p>or angel.co 1000 per hour requests:</p>

<p><code>
○ curl -i http://api.angel.co/
...
Server: nginx
X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 978
</code></p>

<p>Never've seen this before :lame, but as tip - if you are building API and want to limit requests check this link <a href="http://www.ruby-forum.com/topic/201555">http://www.ruby-forum.com/topic/201555</a>, from flip side you can use it as a counter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with HackerNews]]></title>
    <link href="http://khakimov.github.com/blog/2012/03/20/playing-with-hackernews/"/>
    <updated>2012-03-20T21:56:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/03/20/playing-with-hackernews</id>
    <content type="html"><![CDATA[<p>Since monday I started playing with RubyOnRails and very happy that I
didn't skip Ruby part as many beginers mistakenly do. I'm reading <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">Agile Web Development with Rails</a> (big thanks to <a href="http://ap.thinkeffect.com">Andrija</a>) now and still have a lot of questions, but
today want to talk about other things.</p>

<p>As you know many books and tutorials show boring examples like "Hello Word" and my inflamed brain alwayls is looking for opportunity. To build, to parse or hack something. Today when I was waiting my turkey sandwitch in Palo Alto Cafe I read comment where is an author is talking about hackernews karma, like how is awesome to have large karma. I also checked his submissions and realised he just posted random stuff from techcrunch/gizmodo/mashable/etc. So, why not to try post new on HN with ruby?</p>

<p>I certainly do not intend to increase my karma with spam HN, but I was
interested to do it and going to share just few things about the
process.</p>

<h2>How to get fnid? </h2>

<p>To post something on HN you have to know fnid which generate everytime
when you GET <a href="http://news.ycombinator.com/submit">http://news.ycombinator.com/submit</a>.</p>

<p>```ruby
require 'nokogiri'
require 'open-uri'</p>

<p>def fetch
  submit_html = open('http://news.ycombinator.com/submit', "Cookie" =>
'user=check_yours_cookie_and_put_here').read
  doc = Nokogiri::HTML.parse(submit_html)
  doc.xpath('//form/input')[0]['value']
end
```</p>

<h2>Posting</h2>

<p>Method fetch returns fnid. Ok, now we are going to submit our news with
method post:</p>

<p>```ruby
require "net/http"</p>

<p>def post(url, title)
  fnid = fetch #our fetch method
  params = {'fnid' => fnid, 't' => title, 'u' => url }
  uri = URI.parse('http://news.ycombinator.com/r')
  http = Net::HTTP.new(uri.host, uri.port)</p>

<p>  # the most interesting part. make headers with
  # Cookie and Referer, also you can add User-Agent
  request = Net::HTTP::Post.new(uri.request_uri)
  request.set_form_data(params)
  request["Cookie"] = 'user=check_yours_cookie_and_put_here'
  request["Referer"] = 'http://news.ycombinator.com/submit'</p>

<p>  response = http.request(request)
end
```</p>

<p>Nice and simple, that's why I fall in love with Ruby. Here is my
sandwich arrived ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put Off Procrastination]]></title>
    <link href="http://khakimov.github.com/blog/2012/03/16/put-off-procrastination/"/>
    <updated>2012-03-16T22:07:00-07:00</updated>
    <id>http://khakimov.github.com/blog/2012/03/16/put-off-procrastination</id>
    <content type="html"><![CDATA[<p>I've already written about idea with <a href="http://pupsor.github.com/blog/2012/03/07/next-idea-for-hacking-with-ruby/">blocker</a> and today I really tired of this and in hour wrote the script which allow you to block facebook, gmail, HN and so on with automatic changing statuses in Skype and Adium (DND).</p>

<p>The project called <a href="https://github.com/pupsor/freodom/">Freodom</a>.</p>

<blockquote><p>  Frēodōm is the Old English word for freedom; the state of being free and unconstrained.</p></blockquote>

<p><img src="http://i103.photobucket.com/albums/m151/KiJosh/procrastination.jpg" alt="put
off" /></p>

<ol>
<li>Frēodōm blocks:
  facebook.com,
  news.ycombinator.com,
  reddit.com,
  gmail.com,
  ...</li>
<li>Automatically changes status to DND (skype/adium)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make new instagram's friends with Ruby]]></title>
    <link href="http://khakimov.github.com/blog/2012/03/09/how-to-make-new-instagrams-friends-with-ruby/"/>
    <updated>2012-03-09T11:09:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/03/09/how-to-make-new-instagrams-friends-with-ruby</id>
    <content type="html"><![CDATA[<p>I moved to Palo Alto few month ago from LA and realized that I didn't know anybody in Bay Area. I was looking for a new friends ;) I had one and his name is Ruby, so we decided to write some code which will help me to make new friends in instagram. First of all it was a good practice and also interesting task where you can easily get feedback from action (code and you get friends).</p>

<h2>Instagram</h2>

<p>It’s a fast, beautiful and fun way to share your life with friends through a series of pictures.</p>

<p>Snap a photo with your iPhone, choose a filter to transform the look and feel, send to Facebook, Twitter or Flickr – it’s all as easy as pie. It’s photo sharing, reinvented.</p>

<p>Instagram has <a href="http://instagram.com/developer/">API</a> which allows you to do anything you want - search users, their likes, relationships, comments, tags, locations and geo.</p>

<h2>Idea</h2>

<p>The idea was simple - to find by tags people who posted their photos from San Francisco and Bay Area (#sanfrancisco, #bayarea, #paloalto, #mountainview and so on). What will I get? I will get the users who probably living there and then I will just follow them and probably they will follow me back. So I will get followers from Bay Area and will able to talk through my pics with people who are living in Bay Area. As example, I can ask about some nice event or party and maybe somebody will share some or invite ;) Stupid isn't? But it works!</p>

<h2>Code</h2>

<p>``` ruby Let me introduce myself ;)
require 'open-uri'
require 'uri'
require 'net/http'
require 'net/https'
require 'json'</p>

<p>ACCESS_TOKEN = "put_yours_access_token_there"</p>

<p>def fetch(url, response = '')
  begin</p>

<pre><code>open(url) { |f| f.each_line {|line| response += line } }
return JSON.parse(response) 
</code></pre>

<p>  rescue OpenURI::HTTPError</p>

<pre><code>nil
</code></pre>

<p>  end
end</p>

<p>def get_followers
  url = "https://api.instagram.com/v1/users/self/followed-by?access_token=#{ACCESS_TOKEN}"
  next_url = fetch(url)['pagination']['next_url']
  followers = {}</p>

<p>  while next_url</p>

<pre><code>result = fetch(next_url)
next_url = result['pagination']['next_url']
result['data'].each { |data| followers.merge!(data['username'] =&gt; data['id'])}
p followers.count
</code></pre>

<p>  end
  return followers
end</p>

<p>def unfollow_mutual_friends(followers)
  url = "https://api.instagram.com/v1/users/self/follows?access_token=#{ACCESS_TOKEN}"
  next_url = fetch(url)['pagination']['next_url']</p>

<p>  while next_url</p>

<pre><code>result = fetch(next_url)
next_url = result['pagination']['next_url']

result['data'].each { |data| 
  unless followers.include?(data['username'])
    uri = URI.parse("https://api.instagram.com/v1/users/#{data['id']}/relationship?access_token=#{ACCESS_TOKEN}")
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Post.new(uri.path)
    request.set_form_data("action" =&gt; "unfollow", "access_token" =&gt; "#{ACCESS_TOKEN}")

    response = http.request(request)
    p "#{data['username']} code #{response.code}"
  end
  }
</code></pre>

<p>  end
end</p>

<p>def find_users_by_tag(tag)
  url = "https://api.instagram.com/v1/tags/#{tag}/media/recent?access_token=#{ACCESS_TOKEN}"
  next_url = fetch(url)['pagination']['next_url']
  users = {}</p>

<p>  while next_url</p>

<pre><code>result = fetch(next_url)
next_url = result['pagination']['next_url']
result['data'].each { |data| users.merge!(data['user']['username'] =&gt; data['user']['id']) }
# people who likes pics with this tag
#data['likes']['data'].each { |likes| @users.merge!(likes['username'] =&gt; likes['id']) } 
p users.count
</code></pre>

<p>  end
end</p>

<p>def follow_users(potential_friends)
  potential_friends.each { |username, id|</p>

<pre><code>uri = URI.parse("https://api.instagram.com/v1/users/#{id}/relationship?access_token=#{ACCESS_TOKEN}")
http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(uri.path)
request.set_form_data("action" =&gt; "follow", "access_token" =&gt; "#{ACCESS_TOKEN}")

response = http.request(request)
puts "#{username} added" if response.code == "200"
</code></pre>

<p>  }
end
```</p>

<p>So, if we want to find and follow people who tagged their pics with tag #paloalto:</p>

<p><code>ruby find users by tag #paloalto and follow them
potential_friends = find_users_by_tag("paloalto")
follow_user(potential_friends)
</code></p>

<p>To unfollow people we have to know who is following us and then unfollow who is not.</p>

<p><code>ruby unfollow !mutual people
followers = get_followers
unfollow_mutual_friends(followers)
</code></p>

<p>so, that's it. Of course this is my ugly code has to be improved and will be better to add some features like save followers list, save position of finding user by tag (disconnect or something - save the last url and next run will be continue parsing from this position). Anyway, this is just simple ruby script (heh, I've rewritten few time, it was good practice but still code look ugly I know).</p>

<p>ps: proof
<img src="http://pix.am/HIiH.png" alt="proof" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next idea for hacking with Ruby]]></title>
    <link href="http://khakimov.github.com/blog/2012/03/07/next-idea-for-hacking-with-ruby/"/>
    <updated>2012-03-07T13:54:00-08:00</updated>
    <id>http://khakimov.github.com/blog/2012/03/07/next-idea-for-hacking-with-ruby</id>
    <content type="html"><![CDATA[<p>Right now I'm sitting at public library of Palo Alto because I have reason. This reason is based on my laziness and totally destructions by anything around me, probably correct word which can describe my problem is procrastination, you can read about  <a href="http://youarenotsosmart.com/2010/10/27/procrastination/">Proctastionation here</a>.</p>

<blockquote><p>  Procrastination is an impulse; it’s buying candy at the checkout. Procrastination is also hyperbolic discounting, taking the sure thing in the present over the caliginous prospect some day far away.</p></blockquote>

<p>So, now you can understand why am I sitting in public library, because this is only one place where I can easily focus and concentrate for doing things or learn to code. Only here I never think about one more cup o tea/coffee or lying to the sofa and think about thinking. But still one bad thing happened here and this thing (I've never thought what I'll able to say this) is internet, to be honest I'm talking about "bad" side of internet like any kind of social networks, AIM, Skype and email.</p>

<p>As you can see those things are our impulse with fast feedback; it's buying candy at the checkout or checking facebook's page, email, twitter, response on each message in Skype and Jabber. To finish my long entry I want to be disconnected for the time when I want to concentrate and focus on current task. But how? Even public library has wi-fi spot. To solve this problem I should disconect myself from the internet or filter it without any "easy" turn off solution, if I want to disconnect for 1 hour - I will and nothing can unblock it except reboot.</p>

<p><img src="http://thejesuswave.files.wordpress.com/2009/03/concentration.gif" alt="Concentrate with Ruby" /></p>

<p>I've seen few apps with same idea, like <a href="http://macfreedom.com/">Freedom</a> that disconect network for a certain time (like have a freedom for 1 hour or 2 hours ;). It costs $10 and works well, but I want to count how many hours I was disconected, maybe try to count how many requests I did to facebook, twitter and how addicted am I and so on.</p>

<p>Few ideas how to do it on mac:</p>

<blockquote><ul>
<li> /etc/hosts</li>
<li> ipfw</li>
<li> just shutdown network interface</li>
</ul>
</blockquote>

<p>to be continue...</p>
]]></content>
  </entry>
  
</feed>
